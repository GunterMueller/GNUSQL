/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "dispatch.h"

bool_t
xdr_rpc_svc_t(xdrs, objp)
	register XDR *xdrs;
	rpc_svc_t *objp;
{

	register long *buf;

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_opq(xdrs, objp)
	register XDR *xdrs;
	opq *objp;
{

	register long *buf;

	if (!xdr_bytes(xdrs, (char **)&objp->opq_val, (u_int *) &objp->opq_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_res(xdrs, objp)
	register XDR *xdrs;
	res *objp;
{

	register long *buf;

	if (!xdr_opq(xdrs, &objp->proc_id))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->rpc_id))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_init_arg(xdrs, objp)
	register XDR *xdrs;
	init_arg *objp;
{

	register long *buf;

	if (!xdr_string(xdrs, &objp->user_name, ~0))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->wait_time))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->total_time))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->type))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->need_gdb))
		return (FALSE);
	if (!xdr_string(xdrs, &objp->x_server, ~0))
		return (FALSE);
	return (TRUE);
}
long adm_rpc_port = 0x30001001;

void fix_adm_port(char* opt)
{
  static int have_got = 0;
  if (opt)
    {
      adm_rpc_port = atol(opt);
      have_got = 1;
    }
  else if (!have_got)
    {
      char *s = getenv("GSSPORT");
      if (s)
        adm_rpc_port = atol(s);
      have_got = 1;
    }
}
