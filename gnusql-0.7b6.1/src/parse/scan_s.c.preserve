/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
static yyconst short int yy_accept[471] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  133,  121,
      116,  120,  118,  117,  107,  108,   99,   97,  109,   98,
      110,  100,  112,  121,   16,  104,  101,  103,   11,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  124,  123,  125,  130,  131,  128,  127,  129,  116,
      119,  113,  115,  113,  112,   10,  106,  102,  105,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      124,  122,  128,  126,  115,  114,   10,  111,  111,  111,
      111,   40,  111,  111,  111,  111,  111,   43,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,    7,  111,  111,  111,  111,  111,  111,
      111,    5,  111,  111,  111,  111,   58,  111,  111,  111,
       62,   29,  111,  111,  111,  111,  111,  111,  111,  111,
       65,   66,  111,  111,   90,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   26,  111,  111,  111,  111,  111,  111,
      111,  111,   38,  111,   89,   39,   41,  111,   92,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
       82,  111,  111,  111,  111,  111,  111,  111,   18,  111,
      111,  111,  111,   54,  111,  111,   55,  111,  111,  111,
      111,  111,  111,  111,   83,  111,   61,  111,   63,   93,
       94,  111,   91,   64,  111,   67,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
       71,  111,   72,  111,  111,   95,  111,  111,  111,  111,

       75,  111,   22,  111,  111,   78,   79,   19,  111,    6,
      111,   80,  111,   25,   44,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   49,  111,  111,  111,  111,
       53,  111,  111,    2,   23,   56,  111,   31,  111,  111,
      111,  111,  111,  111,  111,   68,  111,  111,  111,  111,
      111,   86,  111,  111,  111,  111,  111,  111,  111,  111,
      111,   21,   73,  111,  111,  111,  111,   77,  111,  111,
      111,   45,  111,   96,   17,  111,   47,  111,  111,  111,
       48,  111,  111,   51,   52,   85,  111,   57,  111,   60,
      111,  111,   12,  111,   32,  111,  111,  111,  111,   34,

      111,   24,  111,   20,  111,   70,  111,  111,  111,   36,
       74,   76,  111,  111,   42,  111,  111,   46,  111,    8,
       27,  111,   87,   28,  111,  111,  111,  111,  111,   30,
      111,  111,  111,  111,    9,  111,   15,  111,  111,  111,
      111,    4,   50,  111,   13,   81,  111,  111,  111,  111,
       69,  111,    3,    1,  111,  111,   59,  111,  111,   14,
      111,   84,  111,   88,   33,   35,  111,  111,   37,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,   20,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
        1,    1,    1,    1,   21,    1,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[48] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        5,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6
    } ;

static yyconst short int yy_base[479] =
    {   0,
        0,    0,   45,   46, 1065, 1064,   49,   51, 1066, 1069,
     1063, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1053,
       42, 1069,   45,    0, 1069,   42, 1069, 1045, 1069,   29,
       32,   34,   49,   42,   57,   45, 1040,   51,    0, 1035,
       44,   67,   56,   67,   66,   73,   86,   78,   76,   85,
       89,    0, 1069, 1055, 1069, 1069,    0, 1069, 1055, 1056,
     1069,  103,  112,  113,  118,    0, 1069, 1069, 1069,    0,
      100,   55,  141, 1016, 1028,  127,  168,  109, 1019,  155,
     1028, 1014,  167, 1012, 1009, 1014, 1024, 1024, 1017, 1005,
     1009,   95, 1008,  207,  160, 1000,  248,  289,  996, 1006,

     1008,  994, 1003, 1012,  995,  129,  309,  329,  180,  349,
      169, 1012,  219, 1001, 1004,  204, 1010,  997,  997,  995,
     1005,  374,  997, 1001,  999,  991,  997,  996,  980,  981,
        0, 1069,    0, 1069, 1005, 1004,    0,  394,  991,  414,
      434, 1069,  454,  987,  474,  985,  970, 1069,  974,  988,
      971,  976,  968,  973,  985,  127,  494,  984,  979,  980,
      962,  979,  964,    0,  978,  959,  974,  975,  527,  961,
      961, 1069,  958,  958,  950,  961, 1069,  110,  964,  553,
     1069,    0,  961,  962,  589,  609,  945,  629,  953,  959,
     1069, 1069,  949,  953, 1069,  956,  957,  158,  956,  946,

      945,  951,  940,  942,  948,  932,  946,  649,  938,  944,
      178,  669,  936, 1069,  193,  946,  928,  924,  921,  195,
      935,  931, 1069,  923, 1069, 1069, 1069,  925, 1069,  925,
      933,  689,  926,  931,  926,  925,  913,  912,  926,  915,
     1069,  916,  927,  906,  906,  711,  916,  912,    0,  907,
      902,  913,  900, 1069,  910,  914,    0,  897,  896,  899,
      900,  889,  909,  893, 1069,  903,    0,  888,    0, 1069,
     1069,  896, 1069,    0,  889,    0,  891,  887,  895,  902,
      893,  896,  891,  731,  881,  887,  895,  883,  886,  891,
     1069,  881,    0,  877,  873, 1069,  885,  875,  867,  867,

        0,  881,    0,  880,  874,    0,    0,    0,  860,    0,
      869, 1069,  869,    0,    0,  824,  810,  751,  799,  770,
      746,  743,  706,  692,  684, 1069,  668,  657,  637,  603,
        0,  771,  595,    0,    0,    0,  575,    0,  566,  546,
      560,  563,  558,  553,  547,    0,  541,  541,  545,  552,
      552, 1069,  549,  548,  545,  530,  515,  509,  519,  523,
      502,    0,    0,  500,  499,  483,  479,    0,  491,  485,
      478,    0,  476, 1069,    0,  476,    0,  483,  489,  467,
        0,  464,  791,    0,    0, 1069,  433,    0,  407,    0,
      389,  380,    0,  364,    0,  343,  326,  345,  328,    0,

      328,    0,  319,    0,  288,    0,  268,  261,  250,    0,
        0,    0,  259,  237,    0,  257,  256,    0,  202,    0,
        0,  240, 1069,    0,  244,  167,  253,  811,  242,    0,
      249,  237,  251,  242,    0,  231,    0,  232,  231,  247,
      208,    0,    0,  205,    0, 1069,  208,  216,  214,  213,
        0,  831,    0,    0,  197,  214,    0,  851,  193,    0,
      158, 1069,  134, 1069,    0,    0,  102,   60,    0, 1069,
      871,  877,  883,   59,  885,  891,  897,  899
    } ;

static yyconst short int yy_def[479] =
    {   0,
      470,    1,  471,  471,  472,  472,  473,  473,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  474,  470,  470,  470,  470,  470,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  476,  470,  470,  470,  470,  477,  470,  470,  470,
      470,  470,  470,  470,  470,  478,  470,  470,  470,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      476,  470,  477,  470,  470,  470,  478,  475,  475,  475,
      475,  470,  475,  475,  475,  475,  475,  470,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  470,  475,  475,  475,  475,  470,  475,  475,  475,
      470,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      470,  470,  475,  475,  470,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  470,  475,  475,  475,  475,  475,  475,
      475,  475,  470,  475,  470,  470,  470,  475,  470,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      470,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  470,  475,  475,  475,   94,  475,  475,
      475,  475,  475,  475,  470,  475,  475,  475,  475,  470,
      470,  475,  470,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      470,  475,  475,  475,  475,  470,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  470,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  470,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  470,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  470,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  470,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  157,  475,
      475,  475,  470,  475,  475,  180,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  470,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  232,  475,  475,  475,  475,
      475,  470,  475,  470,  475,  475,  475,  475,  475,    0,
      470,  470,  470,  470,  470,  470,  470,  470
    } ;

static yyconst short int yy_nxt[1117] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       10,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   39,   46,   47,
       48,   49,   50,   51,   39,   39,   39,   53,   53,   54,
       54,   58,   59,   58,   59,   62,   64,   76,   65,   67,
       68,   71,   78,   72,   66,  100,   79,   63,   73,   80,
       74,   75,   81,  101,   83,   82,   87,   77,   84,  140,
       94,   88,   90,   95,   85,   97,   89,   86,  102,   91,
       98,  105,   92,  107,  469,   93,  103,  106,  113,  121,

      141,  108,  104,  109,  111,  110,  126,  112,  114,  115,
      123,  116,  124,  122,  127,  125,   62,  128,  129,  117,
      135,  118,  135,  119,  130,  136,   62,  120,   63,   64,
      149,   65,  138,  169,  150,  262,  170,  468,   63,  263,
      139,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  146,  142,  142,  142,  142,  142,
      142,  189,  190,  467,  143,  239,  240,  147,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  174,  148,  148,  148,  148,  148,  148,  152,  153,
      157,  280,   70,  158,  197,  175,  154,  466,  198,  159,

      281,  294,   70,  295,  199,  193,  160,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      194,  172,  172,  172,  172,  172,  172,  206,  298,  304,
      299,   70,  465,  305,   70,   70,  207,  463,  461,  460,
      201,  459,  458,  457,  208,  202,  456,  173,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  203,  177,  177,  177,  177,  177,  177,  455,  454,
      453,  452,  178,  451,  450,  449,  448,  447,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  179,  180,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  436,  181,  181,  181,  181,  181,  181,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  435,  191,  191,  191,  191,  191,  191,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  434,  192,  192,  192,  192,  192,  192,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  433,  195,  195,  195,  195,  195,  195,  432,
      431,  430,  429,  196,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  428,  214,  214,
      214,  214,  214,  214,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  427,  223,  223,
      223,  223,  223,  223,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  426,  225,  225,
      225,  225,  225,  225,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  425,  226,  226,
      226,  226,  226,  226,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  424,  227,  227,
      227,  227,  227,  227,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  422,  229,  229,
      229,  229,  229,  229,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  421,  241,  241,
      241,  241,  241,  241,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  242,  411,  410,  243,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      409,  254,  254,  254,  254,  254,  254,  408,  407,  406,
      405,  404,  255,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  403,  265,  265,  265,
      265,  265,  265,  402,  401,  400,  399,  398,  266,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  267,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  388,  270,  270,  270,  270,  270,  270,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  387,  271,  271,  271,  271,  271,  271,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  385,  273,  273,  273,  273,  273,  273,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  384,  291,  291,  291,  291,  291,  291,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  383,  296,  296,  296,  296,  296,  296,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  382,  312,  312,  312,  312,  312,  312,  381,
      313,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  380,  326,  326,  326,  326,  326,
      326,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  379,  352,  352,  352,  352,  352,
      352,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  378,  374,  374,  374,  374,  374,
      374,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  377,  386,  386,  386,  386,  386,
      386,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  376,  423,  423,  423,  423,  423,
      423,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  375,  446,  446,  446,  446,  446,
      446,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  373,  462,  462,  462,  462,  462,
      462,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  372,  464,  464,  464,  464,  464,
      464,   52,   52,   52,   52,   52,   52,   55,   55,   55,
       55,   55,   55,   57,   57,   57,   57,   57,   57,   70,
       70,  131,  371,  131,  370,  131,  131,  133,  369,  368,

      133,  133,  133,  137,  137,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,   70,  334,  333,
      332,  331,  330,  329,  328,  327,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  311,  310,
      309,  308,  307,  306,  303,  302,  301,  300,  297,  293,
      292,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      279,  278,  277,  276,  275,  274,  272,  269,  268,  264,
      261,  260,  259,  258,  257,  256,  253,  252,  251,  250,

      249,  248,  247,  246,  245,  244,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  228,  224,  136,  136,  222,
      221,  220,  219,  218,  217,  216,  215,  213,  212,  211,
      210,  209,  205,  204,  200,  188,  187,  186,  185,  184,
      183,  182,  176,  171,  168,  167,  166,  165,  164,  163,
      162,  161,  156,  155,  151,  145,  144,   60,  134,  132,
       99,   96,   69,   61,   60,  470,   56,   56,    9,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470
    } ;

static yyconst short int yy_chk[1117] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    3,
        4,    7,    7,    8,    8,   21,   23,   31,   23,   26,
       26,   30,   32,   30,  474,   41,   32,   21,   30,   32,
       30,   30,   32,   41,   33,   32,   34,   31,   33,   72,
       36,   34,   35,   36,   33,   38,   34,   33,   42,   35,
       38,   43,   35,   44,  468,   35,   42,   43,   46,   48,

       72,   44,   42,   44,   45,   44,   50,   45,   46,   47,
       49,   47,   49,   48,   50,   49,   62,   51,   51,   47,
       63,   47,   63,   47,   51,   63,   64,   47,   62,   65,
       78,   65,   71,   92,   78,  178,   92,  467,   64,  178,
       71,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   76,   73,   73,   73,   73,   73,
       73,  106,  106,  463,   73,  156,  156,   76,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   95,   77,   77,   77,   77,   77,   77,   80,   80,
       83,  198,  426,   83,  111,   95,   80,  461,  111,   83,

      198,  211,  426,  211,  111,  109,   83,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
      109,   94,   94,   94,   94,   94,   94,  116,  215,  220,
      215,  419,  459,  220,  419,  456,  116,  455,  450,  449,
      113,  448,  447,  444,  116,  113,  441,   94,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  113,   97,   97,   97,   97,   97,   97,  440,  439,
      438,  436,   97,  434,  433,  432,  431,  429,  427,  425,
      422,  417,  416,  414,  413,  409,  408,   97,   97,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,  407,   98,   98,   98,   98,   98,   98,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  405,  107,  107,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  403,  108,  108,  108,  108,  108,  108,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  401,  110,  110,  110,  110,  110,  110,  399,
      398,  397,  396,  110,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  394,  122,  122,
      122,  122,  122,  122,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  392,  138,  138,
      138,  138,  138,  138,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  391,  140,  140,
      140,  140,  140,  140,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  389,  141,  141,
      141,  141,  141,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  387,  143,  143,
      143,  143,  143,  143,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  382,  145,  145,
      145,  145,  145,  145,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  380,  157,  157,
      157,  157,  157,  157,  379,  378,  376,  373,  371,  370,
      369,  367,  366,  157,  365,  364,  157,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      361,  169,  169,  169,  169,  169,  169,  360,  359,  358,
      357,  356,  169,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  355,  180,  180,  180,
      180,  180,  180,  354,  353,  351,  350,  349,  180,  348,
      347,  345,  344,  343,  342,  341,  340,  339,  180,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  337,  185,  185,  185,  185,  185,  185,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  333,  186,  186,  186,  186,  186,  186,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  330,  188,  188,  188,  188,  188,  188,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  329,  208,  208,  208,  208,  208,  208,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  328,  212,  212,  212,  212,  212,  212,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  327,  232,  232,  232,  232,  232,  232,  325,
      232,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  324,  246,  246,  246,  246,  246,
      246,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  323,  284,  284,  284,  284,  284,
      284,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  322,  318,  318,  318,  318,  318,
      318,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  321,  332,  332,  332,  332,  332,
      332,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  320,  383,  383,  383,  383,  383,
      383,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  319,  428,  428,  428,  428,  428,
      428,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  317,  452,  452,  452,  452,  452,
      452,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  316,  458,  458,  458,  458,  458,
      458,  471,  471,  471,  471,  471,  471,  472,  472,  472,
      472,  472,  472,  473,  473,  473,  473,  473,  473,  475,
      475,  476,  313,  476,  311,  476,  476,  477,  309,  305,

      477,  477,  477,  478,  478,  304,  302,  300,  299,  298,
      297,  295,  294,  292,  290,  289,  288,  287,  286,  285,
      283,  282,  281,  280,  279,  278,  277,  275,  272,  268,
      266,  264,  263,  262,  261,  260,  259,  258,  256,  255,
      253,  252,  251,  250,  248,  247,  245,  244,  243,  242,
      240,  239,  238,  237,  236,  235,  234,  233,  231,  230,
      228,  224,  222,  221,  219,  218,  217,  216,  213,  210,
      209,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      197,  196,  194,  193,  190,  189,  187,  184,  183,  179,
      176,  175,  174,  173,  171,  170,  168,  167,  166,  165,

      163,  162,  161,  160,  159,  158,  155,  154,  153,  152,
      151,  150,  149,  147,  146,  144,  139,  136,  135,  130,
      129,  128,  127,  126,  125,  124,  123,  121,  120,  119,
      118,  117,  115,  114,  112,  105,  104,  103,  102,  101,
      100,   99,   96,   93,   91,   90,   89,   88,   87,   86,
       85,   84,   82,   81,   79,   75,   74,   60,   59,   54,
       40,   37,   28,   20,   11,    9,    6,    5,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[132] =
    {   0,
      113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
      130,  141,  142,  143,  144,  145,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  174,  179,  180,  181,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219,  220,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  238,  239,
      240,  242,  243,  244,  245,  246,  248,  249,  250,  251,

      253,  254,  255,  256,  257,  258,  260,  261,  262,  263,
      265,  268,  271,  274,  277,  286,  287,  288,  289,  290,
      291,  302,  303,  308,  309,  318,  319,  324,  325,  333,
      334
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#define INITIAL 0

/*
 *  scan_s.l - SQL scanner / server side.
 *            
 *  This file is a part of GNU SQL Server
 *
 *  Copyright (c) 1996-1998, Free Software Foundation, Inc
 *  Developed at the Institute of System Programming
 *  This file is written by Michael Kimelman
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 *  Contact: gss@ispras.ru
 *
 */

/* $Id: scan_s.l,v 1.246 1998/09/29 21:26:35 kimelman Exp $ */
  
#include "xmem.h"
#include "sql_decl.h"
#include "trl.h"
#include "parse.h"
#include "const.h"
  
  
#if defined(stderr)
# undef stderr
#endif
#if defined(stdout)
# undef stdout
#endif
#define stderr STDERR
#define stdout STDOUT

#define SQL_PROC(code)  if(code)		\
  {						\
    yylloc.first_line=line_num; file_pos=yylloc.last_line=line_num; \
    if (code==TOK_IDENTIFIER && !strcmp(STRING(yylval.ltrp),"DEFINITION_SCHEMA")) \
      yylval.ltrp = ltr_rec(SYSADM);		\
    return code;				\
  }

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) serv_scan_buf_inp(buf,&result,max_size)

extern YYLTYPE yylloc;
static i4_t line_num=0;
static char *bufstring=NULL;

static void 
serv_scan_buf_inp(char *buf, i4_t *result, i4_t max_size)
{ 
  register i4_t l = strlen (bufstring );
  l= l > max_size ? max_size : l ;
  if(l)
    {
      bcopy (bufstring, buf, l);
      bufstring += l;
      *result = l;
    }
  else
    {
      *result =  YY_NULL ;
      *buf = 0 ;
    }
}

/* void    SAVESTR(char *s,LTRLREF d); */
#define SAVESTR(s,d)      d=ltr_rec(s)

static str_buf s_scanner_buffer={0,0,NULL};
#define sql_str(s,l)  buffer_string(&s_scanner_buffer,s,l)

#define SQL_str 1
#define SQL_comment 2
#define Identifier 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



    yy_flex_debug=server_scanner_debug;
  /*********************************************
   *          embedded SQL lexics              *
   *********************************************/

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 471 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1069 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 132 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 132 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 133 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP

SQL_PROC(TOK_WHENEVER);
	YY_BREAK
case 2:
YY_RULE_SETUP

SQL_PROC(TOK_FOUND   );
	YY_BREAK
case 3:
YY_RULE_SETUP

SQL_PROC(TOK_SQLERROR);
	YY_BREAK
case 4:
YY_RULE_SETUP

SQL_PROC(TOK_CONTINUE);
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_GOTO    );
	YY_BREAK
case 6:
YY_RULE_SETUP

SQL_PROC(TOK_BEGIN   );
	YY_BREAK
case 7:
YY_RULE_SETUP

SQL_PROC(TOK_END     );
	YY_BREAK
case 8:
YY_RULE_SETUP

SQL_PROC(TOK_DECLARE );
	YY_BREAK
case 9:
YY_RULE_SETUP

SQL_PROC(TOK_SECTION );
	YY_BREAK
case 10:
YY_RULE_SETUP

{
                   SAVESTR(yytext+1,yylval.ltrp);
                   SQL_PROC(TOK_PARAM);
                }
	YY_BREAK
/*********************************************
   *          Dynamic  SQL lexics              *
   *********************************************/
case 11:
YY_RULE_SETUP

{
                 static i4_t placeholders_counter = 0;
                 char str[100];
                 sprintf(str,"__%d",placeholders_counter++);
                 SAVESTR(str,yylval.ltrp);
                 SQL_PROC(TOK_PARAM);
               }
	YY_BREAK
/*********************************************
   *          clean  SQL MODULE lexic          *
   *********************************************/
case 12:
YY_RULE_SETUP

SQL_PROC(TOK_MODULE      );
	YY_BREAK
case 13:
YY_RULE_SETUP

SQL_PROC(TOK_LANGUAGE    );
	YY_BREAK
case 14:
YY_RULE_SETUP

SQL_PROC(TOK_PROCEDURE   );
	YY_BREAK
case 15:
YY_RULE_SETUP

SQL_PROC(TOK_SQLCODE     );
	YY_BREAK
case 16:
YY_RULE_SETUP

SQL_PROC(';'             );
	YY_BREAK
/*********************************************
   *          clean  SQL SCHEMA lexic          *
   *********************************************/
case 17:
YY_RULE_SETUP

SQL_PROC(TOK_CREATE    );
	YY_BREAK
case 18:
YY_RULE_SETUP

SQL_PROC(TOK_DROP      );
	YY_BREAK
case 19:
YY_RULE_SETUP

SQL_PROC(TOK_ALTER     );
	YY_BREAK
case 20:
YY_RULE_SETUP

SQL_PROC(TOK_SCHEMA    );
	YY_BREAK
case 21:
YY_RULE_SETUP

SQL_PROC(TOK_TABLE     );
	YY_BREAK
case 22:
YY_RULE_SETUP

SQL_PROC(TOK_VIEW      );
	YY_BREAK
case 23:
YY_RULE_SETUP

SQL_PROC(TOK_GRANT     );
	YY_BREAK
case 24:
YY_RULE_SETUP

SQL_PROC(TOK_REVOKE    );
	YY_BREAK
case 25:
YY_RULE_SETUP

SQL_PROC(TOK_CHECK     );
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_TO        );
	YY_BREAK
case 27:
YY_RULE_SETUP

SQL_PROC(TOK_DEFAULT   ); 
	YY_BREAK
case 28:
YY_RULE_SETUP

SQL_PROC(TOK_FOREIGN   );
	YY_BREAK
case 29:
YY_RULE_SETUP

SQL_PROC(TOK_KEY       );
	YY_BREAK
case 30:
YY_RULE_SETUP

SQL_PROC(TOK_PRIMARY   );    
	YY_BREAK
case 31:
YY_RULE_SETUP

SQL_PROC(TOK_INDEX     );    
	YY_BREAK
case 32:
YY_RULE_SETUP

SQL_PROC(TOK_OPTION    );
	YY_BREAK
case 33:
YY_RULE_SETUP

SQL_PROC(TOK_PRIVILEGES);
	YY_BREAK
case 34:
YY_RULE_SETUP

SQL_PROC(TOK_PUBLIC    );
	YY_BREAK
case 35:
YY_RULE_SETUP

SQL_PROC(TOK_REFERENCES);    
	YY_BREAK
case 36:
YY_RULE_SETUP

SQL_PROC(TOK_UNIQUE    );
	YY_BREAK
/*********************************************
   *            clean  SQL lexic               *
   *********************************************/
case 37:
YY_RULE_SETUP

SQL_PROC(TOK_AUTHORIZATION);
	YY_BREAK
/*********************************************
   *          common SQL  keywords             *
   *********************************************/
case 38:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_ALL       );
	YY_BREAK
case 39:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_ANY       );
	YY_BREAK
case 40:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_AS        );
	YY_BREAK
case 41:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_ASC       );
	YY_BREAK
case 42:
YY_RULE_SETUP

SQL_PROC(TOK_BETWEEN   );
	YY_BREAK
case 43:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_BY        );
	YY_BREAK
case 44:
YY_RULE_SETUP

SQL_PROC(TOK_CLOSE     );
	YY_BREAK
case 45:
YY_RULE_SETUP

SQL_PROC(TOK_COMMIT    );
	YY_BREAK
case 46:
YY_RULE_SETUP

SQL_PROC(TOK_CURRENT   );
	YY_BREAK
case 47:
YY_RULE_SETUP

SQL_PROC(TOK_CURSOR    );
	YY_BREAK
case 48:
YY_RULE_SETUP

SQL_PROC(TOK_DELETE    );
	YY_BREAK
case 49:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_DESC      );
	YY_BREAK
case 50:
YY_RULE_SETUP

SQL_PROC(TOK_DISTINCT  );
	YY_BREAK
case 51:
YY_RULE_SETUP

SQL_PROC(TOK_ESCAPE    );
	YY_BREAK
case 52:
YY_RULE_SETUP

SQL_PROC(TOK_EXISTS    );
	YY_BREAK
case 53:
YY_RULE_SETUP

SQL_PROC(TOK_FETCH     );
	YY_BREAK
case 54:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_FOR       );
	YY_BREAK
case 55:
YY_RULE_SETUP

SQL_PROC(TOK_FROM      );
	YY_BREAK
case 56:
YY_RULE_SETUP

SQL_PROC(TOK_GROUP     );
	YY_BREAK
case 57:
YY_RULE_SETUP

SQL_PROC(TOK_HAVING    );
	YY_BREAK
case 58:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_IN        );
	YY_BREAK
case 59:
YY_RULE_SETUP

SQL_PROC(TOK_INDICATOR );
	YY_BREAK
case 60:
YY_RULE_SETUP

SQL_PROC(TOK_INSERT    );
	YY_BREAK
case 61:
YY_RULE_SETUP

SQL_PROC(TOK_INTO      );
	YY_BREAK
case 62:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_IS        );
	YY_BREAK
case 63:
YY_RULE_SETUP

SQL_PROC(TOK_LIKE      );
	YY_BREAK
case 64:
YY_RULE_SETUP

SQL_PROC(TOK_NULL      );
	YY_BREAK
case 65:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_OF        );
	YY_BREAK
case 66:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_ON        );
	YY_BREAK
case 67:
YY_RULE_SETUP

SQL_PROC(TOK_OPEN      );
	YY_BREAK
case 68:
YY_RULE_SETUP

SQL_PROC(TOK_ORDER     );
	YY_BREAK
case 69:
YY_RULE_SETUP

SQL_PROC(TOK_ROLLBACK  );
	YY_BREAK
case 70:
YY_RULE_SETUP

SQL_PROC(TOK_SELECT    );
	YY_BREAK
case 71:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_SET       );
	YY_BREAK
case 72:
YY_RULE_SETUP

SQL_PROC(TOK_SOME      );
	YY_BREAK
case 73:
YY_RULE_SETUP

SQL_PROC(TOK_UNION     );
	YY_BREAK
case 74:
YY_RULE_SETUP

SQL_PROC(TOK_UPDATE    );
	YY_BREAK
case 75:
YY_RULE_SETUP

SQL_PROC(TOK_USER      );
	YY_BREAK
case 76:
YY_RULE_SETUP

SQL_PROC(TOK_VALUES    );
	YY_BREAK
case 77:
YY_RULE_SETUP

SQL_PROC(TOK_WHERE     );
	YY_BREAK
case 78:
YY_RULE_SETUP

SQL_PROC(TOK_WITH      );
	YY_BREAK
case 79:
YY_RULE_SETUP

SQL_PROC(TOK_WORK      );
	YY_BREAK
/******************************************
   *  common SQL  keywords  for data type   *
   ******************************************/
case 80:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_CHAR);
	YY_BREAK
case 81:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_NUM);
	YY_BREAK
case 82:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_NUM);
	YY_BREAK
case 83:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_INT);
	YY_BREAK
case 84:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_SINT);
	YY_BREAK
case 85:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_FLT);
	YY_BREAK
case 86:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_REAL);
	YY_BREAK
case 87:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_DOUBLE);
	YY_BREAK
case 88:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_T_PRECISION);
	YY_BREAK
/******************************************
   *  common SQL  keywords  for expression  *
   ******************************************/
case 89:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_AND       );
	YY_BREAK
case 90:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_OR        );
	YY_BREAK
case 91:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_NOT       );
	YY_BREAK
case 92:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_AVG   );
	YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_MAX   );
	YY_BREAK
case 94:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_MIN   );
	YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_SUM   );
	YY_BREAK
case 96:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

SQL_PROC(TOK_COUNT );
	YY_BREAK
case 97:
YY_RULE_SETUP

SQL_PROC('+'   );
	YY_BREAK
case 98:
YY_RULE_SETUP

SQL_PROC('-'   );
	YY_BREAK
case 99:
YY_RULE_SETUP

SQL_PROC('*'   );
	YY_BREAK
case 100:
YY_RULE_SETUP

SQL_PROC('/'   );
	YY_BREAK
case 101:
YY_RULE_SETUP

SQL_PROC('='   );
	YY_BREAK
case 102:
YY_RULE_SETUP

SQL_PROC(TOK_NE);
	YY_BREAK
case 103:
YY_RULE_SETUP

SQL_PROC('>'   );
	YY_BREAK
case 104:
YY_RULE_SETUP

SQL_PROC('<'   );
	YY_BREAK
case 105:
YY_RULE_SETUP

SQL_PROC(TOK_GE);
	YY_BREAK
case 106:
YY_RULE_SETUP

SQL_PROC(TOK_LE);
	YY_BREAK
case 107:
YY_RULE_SETUP

SQL_PROC('('   );
	YY_BREAK
case 108:
YY_RULE_SETUP

SQL_PROC(')'   );
	YY_BREAK
case 109:
YY_RULE_SETUP

SQL_PROC(','   );
	YY_BREAK
case 110:
YY_RULE_SETUP

SQL_PROC('.'   );
	YY_BREAK
case 111:
YY_RULE_SETUP

{ SAVESTR(yytext,yylval.ltrp);
                  SQL_PROC(TOK_IDENTIFIER);}
	YY_BREAK
case 112:
YY_RULE_SETUP

{ /*  read decimal constant  */
                  yylval.node=gen_const_node(SQLType_Int,yytext);
                  SQL_PROC(TOK_INTEGER_CONST); }
	YY_BREAK
case 113:
YY_RULE_SETUP

{ /*  read float constant  */
                  yylval.node=gen_const_node(SQLType_Num,yytext);
                  SQL_PROC(TOK_NUM_CONST); }
	YY_BREAK
case 114:
YY_RULE_SETUP

{  /*  read float constant  */
                  yylval.node=gen_const_node(SQLType_Real,yytext);
                  SQL_PROC(TOK_REAL_CONST); }
	YY_BREAK
case 115:
YY_RULE_SETUP

{  /*  read float constant with error in exponent */
                  yyerror("Lex: error format for floating constant");
                  sql_str(yytext,yyleng);
                  sql_str("0",1);  /* recovery error as possible */
                  {
                    char *ptr=sql_str(NULL,0);
                    yylval.node=gen_const_node(SQLType_Real,ptr);
                  }
                  SQL_PROC(TOK_REAL_CONST); }
	YY_BREAK
case 116:
YY_RULE_SETUP

/* do nothing */
	YY_BREAK
case 117:
YY_RULE_SETUP

BEGIN(SQL_str);
	YY_BREAK
case 118:
YY_RULE_SETUP

BEGIN(Identifier);
	YY_BREAK
case 119:
YY_RULE_SETUP

BEGIN(SQL_comment);  /* ? ? obsolete */
	YY_BREAK
case 120:
YY_RULE_SETUP

line_num++;
	YY_BREAK
case 121:
YY_RULE_SETUP

{ 
                  char strng[100];
                  file_pos=line_num;
		  sprintf(strng,
			  "syntax error: unexpected char '%c'",
			  *yytext);
                  yyerror(strng);
		}
	YY_BREAK
/*********************************************
   *             SQL string recognizer         *
   *********************************************/
case 122:
YY_RULE_SETUP

sql_str("'",1);
	YY_BREAK
case 123:
YY_RULE_SETUP

{
                      yyerror(" Unterminated SQL string ");
                      line_num++;
		      BEGIN(INITIAL);
                    }
	YY_BREAK
case 124:
YY_RULE_SETUP

sql_str(yytext,yyleng);
	YY_BREAK
case 125:
YY_RULE_SETUP

{
                      char *ptr=sql_str(NULL,0);
                      BEGIN(INITIAL);
                      yylval.node=gen_const_node(SQLType_Char,ptr);
                      SQL_PROC(TOK_STRING_CONST); 
		    }
	YY_BREAK
/*********************************************
   *             SQL quoted identifiers        *
   *********************************************/
case 126:
YY_RULE_SETUP

sql_str("\"",1);
	YY_BREAK
case 127:
YY_RULE_SETUP

{
                      yyerror(" Unterminated quoted identifier ");
                      line_num++;
		      BEGIN(INITIAL);
                    }
	YY_BREAK
case 128:
YY_RULE_SETUP

sql_str(yytext,yyleng);
	YY_BREAK
case 129:
YY_RULE_SETUP

{
                      BEGIN(INITIAL);
		      SAVESTR(sql_str(NULL,0),yylval.ltrp);
		      SQL_PROC(TOK_IDENTIFIER);
		    }
	YY_BREAK
/*********************************************
   *             SQL comment recognizer        *
   *********************************************/
case 130:
YY_RULE_SETUP

/* do nothing */;
	YY_BREAK
case 131:
YY_RULE_SETUP

{ line_num++; BEGIN(INITIAL); }
	YY_BREAK
case 132:
YY_RULE_SETUP

ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SQL_str):
case YY_STATE_EOF(SQL_comment):
case YY_STATE_EOF(Identifier):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 471 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 471 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 470);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



void
restart_server_scanner(char *stmt,i4_t bline)
{
  yy_init=1;
  line_num=bline;
  bufstring=stmt;
}
#ifndef yywrap            
int yywrap() { return 1; }
#endif                    
/*end of make-dist.tmp.17704/gnusql-0.7b6.1/src/parse/scan_s.c.preserve*/
