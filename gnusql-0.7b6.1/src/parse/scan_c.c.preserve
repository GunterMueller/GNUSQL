/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
static yyconst short int yy_accept[158] =
    {   0,
        0,    0,    0,    0,   12,   12,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   45,   43,   26,    6,   43,   43,   43,   43,
       43,   26,   43,   43,   44,    3,   44,    5,    5,    3,
        5,    5,    5,   12,   14,   13,   10,   11,    7,   10,
       32,   27,   31,   29,   28,   32,   32,   17,   21,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   44,   44,
       44,   44,   35,   34,   36,   38,   37,   40,   41,   42,
       26,   30,    0,    0,    0,    0,   26,    0,    0,    4,
        1,    0,    2,    0,   12,   13,   13,   15,   10,    9,

        8,   27,   16,    0,    0,    0,    0,    0,   35,   33,
       38,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
       23,    0,    0,    0,    0,   24,    0,   18,    0,    0,
        0,   25,   19,    0,    0,   20,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    7,    1,    1,    8,    1,
        1,    9,    1,    1,   10,    1,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,   13,    1,
        1,    1,    1,    1,   15,   12,   16,   17,   18,   12,
       19,   20,   21,   12,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   12,   12,
        1,   14,    1,    1,   12,    1,   15,   12,   16,   17,

       18,   12,   19,   20,   21,   12,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       12,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[36] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    5,    1,
        1,    6,    1,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static yyconst short int yy_base[180] =
    {   0,
        0,   23,    2,   46,    3,   11,   15,   28,   63,   75,
       76,   81,   98,    0,   20,   39,   20,   42,   16,   40,
      317,  316,  318,  321,    5,  321,  307,  293,  286,  285,
      287,  100,   56,  277,  321,  321,  302,  321,   73,  321,
      117,  301,  274,    0,  321,   59,  321,  321,  321,   93,
      321,   80,  321,  321,  321,  298,  298,  321,  321,  288,
      279,  275,  280,  273,  272,  271,  281,  277,  274,  267,
      266,  268,    0,  321,  285,    0,  321,  286,  321,  321,
       93,  321,  260,  272,  263,  271,  121,  131,  252,  321,
      321,  268,  321,  122,    0,  101,  132,  321,  321,  321,

      321,  140,  321,  269,  258,  268,  249,  250,    0,  321,
        0,  321,  262,  264,  251,  245,  260,  252,  258,  248,
      246,  251,  241,  200,    0,  207,  224,  209,  194,  178,
      184,    0,  120,  321,  119,   60,  102,  113,    0,  108,
      321,    0,   88,   88,   69,  321,    0,  321,   49,    0,
       22,  321,  321,   14,    0,  321,  321,  144,  150,  156,
      162,  168,  174,  180,  186,  192,  198,  204,  210,  216,
      222,  228,  234,  239,  244,  249,  254,  259,  264
    } ;

static yyconst short int yy_def[180] =
    {   0,
      158,  158,  159,  160,  161,  161,  162,  162,  163,  163,
       10,   10,   10,   13,  159,  159,  164,  164,  165,  165,
      166,  166,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  167,  157,  157,  157,  157,  157,  157,  157,
      167,  157,  157,  168,  157,  169,  157,  157,  157,  170,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  171,  157,  157,  172,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  167,  157,  157,
      157,  157,  157,  157,  168,  169,  169,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  171,  157,
      172,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  173,  157,  157,  157,  157,  157,
      157,  174,  157,  157,  157,  157,  157,  157,  175,  157,
      157,  176,  157,  157,  157,  157,  177,  157,  157,  178,
      157,  157,  157,  157,  179,  157,    0,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157
    } ;

static yyconst short int yy_nxt[357] =
    {   0,
      157,   25,   26,   25,   26,   45,   81,   36,   81,   27,
      157,   46,   37,   45,   28,   29,   30,   48,   77,   46,
       49,   78,   74,   31,   32,   26,   25,   75,   50,   33,
       48,  155,   27,   49,   69,   70,   71,   28,   29,   30,
       34,   50,   77,   72,   74,   78,   31,   39,   26,   75,
      154,   40,   41,   69,   70,   71,   42,   91,   91,   91,
       91,  136,   72,   43,   52,   53,   52,   97,   54,   98,
       55,   88,   56,   57,   94,   58,   52,   53,   52,   88,
       54,  102,   55,  102,   56,   57,   51,   58,   59,  143,
       89,   51,   60,   59,   81,  100,   81,   60,  101,   61,

      151,   87,   62,   81,   61,  150,   88,   62,   51,  157,
       51,  157,   63,   64,   65,  149,   66,   89,   91,   91,
       91,   91,   87,   94,   81,  147,   67,   88,   88,  145,
      144,   68,   91,   91,   91,   91,  142,  125,   89,   89,
       97,  102,   98,  102,   24,   24,   24,   24,   24,   24,
       35,   35,   35,   35,   35,   35,   38,   38,   38,   38,
       38,   38,   44,   44,   44,   44,   44,   44,   47,   47,
       47,   47,   47,   47,   51,   51,   51,   51,   51,   51,
       73,   73,   73,   73,   73,   73,   76,   76,   76,   76,
       76,   76,   79,   79,   79,   79,   79,   79,   90,   90,

       90,   90,   90,   90,   95,  140,   95,   95,  139,   95,
       96,  138,   96,   96,   96,   96,   99,   99,   99,   99,
       99,   99,  109,  137,  109,  136,  109,  109,  111,  135,
      133,  111,  111,  111,  134,  134,  134,  134,  134,  141,
      141,  141,  141,  141,  146,  146,  146,  146,  146,  148,
      148,  148,  148,  148,  152,  152,  152,  152,  152,  153,
      153,  153,  153,  153,  156,  156,  156,  156,  156,  125,
      132,  131,  130,  129,  128,  127,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  117,   92,  116,  115,  114,
      113,  112,  110,   86,   85,   84,   83,  108,  107,  106,

       85,   84,   83,  105,   86,  104,  103,   82,   92,   93,
       93,   92,   86,   85,   84,   83,   82,  157,   80,   80,
       23,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157
    } ;

static yyconst short int yy_chk[357] =
    {   0,
        0,    1,    1,    1,    3,    5,   25,    3,   25,    1,
        0,    5,    3,    6,    1,    1,    1,    7,   19,    6,
        7,   19,   17,    1,    2,    2,    2,   17,    7,    2,
        8,  154,    2,    8,   15,   15,   15,    2,    2,    2,
        2,    8,   20,   15,   18,   20,    2,    4,    4,   18,
      151,    4,    4,   16,   16,   16,    4,   33,   33,   33,
       33,  136,   16,    4,    9,    9,    9,   46,    9,   46,
        9,  149,    9,    9,   39,    9,   10,   10,   10,   39,
       10,   52,   10,   52,   10,   10,   11,   10,   11,  136,
       39,   12,   11,   12,   81,   50,   81,   12,   50,   11,

      145,   32,   11,   32,   12,  144,   32,   12,   13,   96,
       13,   96,   13,   13,   13,  143,   13,   32,   41,   41,
       41,   41,   87,   94,   87,  140,   13,   87,   94,  138,
      137,   13,   88,   88,   88,   88,  135,  133,   87,   94,
       97,  102,   97,  102,  158,  158,  158,  158,  158,  158,
      159,  159,  159,  159,  159,  159,  160,  160,  160,  160,
      160,  160,  161,  161,  161,  161,  161,  161,  162,  162,
      162,  162,  162,  162,  163,  163,  163,  163,  163,  163,
      164,  164,  164,  164,  164,  164,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  166,  166,  166,  167,  167,

      167,  167,  167,  167,  168,  131,  168,  168,  130,  168,
      169,  129,  169,  169,  169,  169,  170,  170,  170,  170,
      170,  170,  171,  128,  171,  127,  171,  171,  172,  126,
      124,  172,  172,  172,  173,  173,  173,  173,  173,  174,
      174,  174,  174,  174,  175,  175,  175,  175,  175,  176,
      176,  176,  176,  176,  177,  177,  177,  177,  177,  178,
      178,  178,  178,  178,  179,  179,  179,  179,  179,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  114,  113,
      108,  107,  106,  105,  104,   92,   89,   86,   85,   84,
       83,   78,   75,   72,   71,   70,   69,   68,   67,   66,

       65,   64,   63,   62,   61,   60,   57,   56,   43,   42,
       37,   34,   31,   30,   29,   28,   27,   23,   22,   21,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[44] =
    {   0,
      114,  119,  124,  128,  129,  130,  134,  135,  136,  137,
      138,  146,  147,  148,  151,  161,  169,  178,  182,  187,
      193,  207,  219,  223,  236,  250,  251,  252,  256,  260,
      263,  267,  273,  274,  279,  280,  287,  292,  293,  294,
      301,  302,  306
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#define INITIAL 0

/*
 *  scan_c.l - scanner-extractor of GNU SQL/C compiler
 *            
 *  This file is a part of GNU SQL Server
 *
 *  Copyright (c) 1996-1998, Free Software Foundation, Inc
 *  Developed at the Institute of System Programming
 *  This file is written by Michael Kimelman.
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 *  Contact:  gss@ispras.ru
 *
 */

/* $Id: scan_c.l,v 1.249 1998/09/29 21:26:34 kimelman Exp $ */

#include "xmem.h"
#include "gsqltrn.h"
#include "sql_decl.h"
#include "procname.h"
#include <assert.h>

#define SWITCH_COND(cond)  { save_condition();BEGIN(cond);}
#define REST_COND            rest_condition();

#define SCANNER_NAME      yylex_extractor

#ifdef YY_DECL
#  undef YY_DECL
#endif
#define YY_DECL           int SCANNER_NAME(void)

YY_DECL;

#define YY_USER_INIT      { BEGIN(START_CONDITION); line_num=1; }
#define YY_USER_ACTION    if(yy_flex_debug){ \
  fprintf(stderr,"\nCurrent lex state=%d\n",yy_start);}

#define SQL_PROC(code)  if(code){file_pos=line_num; return 1<<code;}

static str_buf c_scanner_buffer={0,0,NULL};
#define sql_str(s,l)  buffer_string(&c_scanner_buffer,s,l)

/* defined in main routine */
int open_file(FILE **f,char *ext);

static void  save_condition __P((void));
static void  rest_condition __P((void));

#ifndef START_CONDITION
#  define START_CONDITION   scan_mode_state
#endif

#define BEGIN_MODE(v)    { BEGIN(v); scan_mode_state=v; }

static char *statement_scanner_buffer=NULL;
static int   line_num=1;
static int   io_diff=0;
static char *progname_out=NULL;
static int   bline=1; 

#define APPEND_BUFFER	{ sql_str(yytext,yyleng);} 
#define POP_BUFFER	pop_cl_buffer()

void
pop_cl_buffer(void)
{
  register char *b=sql_str(NULL,0);
  statement_scanner_buffer=b?savestring(b):NULL;
}

#define C_lang 1
#define c_comment 2
#define C_str 3

#define ESQL 4

#define MOD 5
#define SCH 6
#define SQL 7

#define SQL_str 8
#define SQL_ident 9
#define SQL_comment 10


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



    static int esql_caller = 0;
    static int rout_title  = 0;

    int comment_caller     = 0;
    int first_start        = yy_init;
    int with_grant_options = 0;
    
    #ifdef FLEX_DEBUG
      yy_flex_debug=client_scanner_debug;
    #endif
  /*********************************************
   *                C lexics                   *
   *********************************************/

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 158 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 321 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 44 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 44 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 45 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP

{
                          esql_caller=C_lang;
                          bline=line_num;
                          BEGIN_MODE(ESQL);
			}
	YY_BREAK
case 2:
YY_RULE_SETUP

{
                          ECHO;
			  comment_caller=C_lang;
			  BEGIN_MODE(c_comment);
			}
	YY_BREAK
case 3:
YY_RULE_SETUP

{
                          ECHO;
			  BEGIN_MODE(C_str);
			}
	YY_BREAK
case 4:

case 5:
YY_RULE_SETUP

{ ECHO; }
	YY_BREAK
case 6:
YY_RULE_SETUP

{ ECHO; line_num++; }
	YY_BREAK
/*********************************************
   *               C string recognizer         *
   *********************************************/
case 7:
YY_RULE_SETUP

{ ECHO; BEGIN_MODE(C_lang); }
	YY_BREAK
case 8:
YY_RULE_SETUP

{ ECHO; }
	YY_BREAK
case 9:
YY_RULE_SETUP

{ ECHO; ++line_num; }
	YY_BREAK
case 10:
YY_RULE_SETUP

{ ECHO; }
	YY_BREAK
case 11:
YY_RULE_SETUP

{ 
                           ECHO;
                           yyerror("Unterminated C string");
                           BEGIN_MODE(C_lang);
                         }
	YY_BREAK
/*********************************************
   *             C comment recornizer          *
   *********************************************/
case 12:
YY_RULE_SETUP

{ if (comment_caller == C_lang) { ECHO; } }
	YY_BREAK
case 13:
YY_RULE_SETUP

{ if (comment_caller == C_lang) { ECHO; } }
	YY_BREAK
case 14:
YY_RULE_SETUP

{ if (comment_caller == C_lang) { ECHO; }
                              line_num++;
			    }
	YY_BREAK
case 15:
YY_RULE_SETUP

{ if (comment_caller == C_lang)
				{
				  ECHO; 
				}
			      BEGIN_MODE(comment_caller);
			    }
	YY_BREAK
/*********************************************
   *        lexics of embedded SQL in C        *
   *********************************************/
case 16:
YY_RULE_SETUP

{ if(esql_caller==C_lang)
			    {
			      comment_caller=ESQL;
			      BEGIN_MODE(c_comment);
			    }
                          else
			    yyerror("Lex: Unrecognizable literal'/*'\n");
			}
	YY_BREAK
case 17:
YY_RULE_SETUP

{ 
                          BEGIN_MODE(esql_caller);
			  POP_BUFFER;
			  SQL_PROC(ESQL); 
			}
	YY_BREAK
/*********************************************
   *          embedded SQL lexics              *
   *********************************************/
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{
                           BEGIN_MODE(MOD);
			   APPEND_BUFFER;
			 }
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{ 
                           POP_BUFFER;
			   APPEND_BUFFER;
			   SQL_PROC(MOD);
			 }
	YY_BREAK
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{
			   rout_title=1;
			   POP_BUFFER;
			   APPEND_BUFFER;
			   SQL_PROC(MOD);
			 }
	YY_BREAK
case 21:
YY_RULE_SETUP

{
                           APPEND_BUFFER;
			   if(rout_title)	
			     rout_title=0;
			   else
			     {
			       POP_BUFFER;
			       SQL_PROC(MOD);
			     } 
			 }
	YY_BREAK
/*********************************************
   *          clean  SQL SCH lexic             *
   *********************************************/
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{
                            {
                              BEGIN_MODE(SCH);
                              POP_BUFFER;
                              APPEND_BUFFER;
                              if(first_start)
                                first_start=0;
                              else
                                {
                                  SQL_PROC(SCH);
                                }
                            }                    }
	YY_BREAK
case 23:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{
			   APPEND_BUFFER;
                           with_grant_options=1;
			 }
	YY_BREAK
case 24:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{
                           if(with_grant_options)
                             {
			       APPEND_BUFFER;
			       with_grant_options=0;
			     }
                           else
                             {
			       POP_BUFFER;
			       APPEND_BUFFER;
			       SQL_PROC(SCH);
			     }
			 }
	YY_BREAK
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP

{
                           POP_BUFFER;
			   APPEND_BUFFER;
			   SQL_PROC(SCH);
			 }
	YY_BREAK
case YY_STATE_EOF(SCH):

{
                           POP_BUFFER;
                           BEGIN(INITIAL);
			   SQL_PROC(SCH);
			 }
	YY_BREAK
/*********************************************
   *          common SQL  keywords             *
   *********************************************/
case 26:
YY_RULE_SETUP

/* do nothing */;
	YY_BREAK
case 27:
YY_RULE_SETUP

{ APPEND_BUFFER; }
	YY_BREAK
case 28:
YY_RULE_SETUP

{
                           APPEND_BUFFER;
			   SWITCH_COND(SQL_str);
			 }
	YY_BREAK
case 29:
YY_RULE_SETUP

{
                           APPEND_BUFFER;
			   SWITCH_COND(SQL_ident);
			 }
	YY_BREAK
case 30:
YY_RULE_SETUP

{
                           SWITCH_COND(SQL_comment);  
			 }
	YY_BREAK
case 31:
YY_RULE_SETUP

{
                           APPEND_BUFFER;
			   line_num++; 
			 }
	YY_BREAK
case 32:
YY_RULE_SETUP

{ 
                           APPEND_BUFFER;
			 }
	YY_BREAK
/*********************************************
   *             SQL string recognizer         *
   *********************************************/
case 33:
YY_RULE_SETUP

{ APPEND_BUFFER; }
	YY_BREAK
case 34:
YY_RULE_SETUP

{
                           yyerror(" Unterminated SQL string ");
		           line_num++; 
			   REST_COND;
		         }
	YY_BREAK
case 35:
YY_RULE_SETUP

{ APPEND_BUFFER; }
	YY_BREAK
case 36:
YY_RULE_SETUP

{
                           APPEND_BUFFER;
                           REST_COND;
			 }
	YY_BREAK
/*********************************************
   *             SQL string recognizer         *
   *********************************************/
case 37:
YY_RULE_SETUP

{
                           yyerror(" Unterminated SQL identifier ");
		           line_num++; 
			   REST_COND;
		         }
	YY_BREAK
case 38:
YY_RULE_SETUP

{ APPEND_BUFFER; }
	YY_BREAK
case 39:
YY_RULE_SETUP

{ APPEND_BUFFER; }
	YY_BREAK
case 40:
YY_RULE_SETUP

{
			   APPEND_BUFFER ;
                           REST_COND;
			 }
	YY_BREAK
/*********************************************
   *             SQL comment recognizer        *
   *********************************************/
case 41:
YY_RULE_SETUP

/* do nothing */;
	YY_BREAK
case 42:
YY_RULE_SETUP

{
                           line_num++;
			   REST_COND;
			 }
	YY_BREAK
case 43:
YY_RULE_SETUP

{ 
                           ECHO;
			   BEGIN_MODE(C_lang);
			 }
	YY_BREAK
case 44:
YY_RULE_SETUP

ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C_lang):
case YY_STATE_EOF(c_comment):
case YY_STATE_EOF(C_str):
case YY_STATE_EOF(ESQL):
case YY_STATE_EOF(MOD):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(SQL_str):
case YY_STATE_EOF(SQL_ident):
case YY_STATE_EOF(SQL_comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 158 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 158 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 157);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



typedef struct save_yy_cond {
      int yy_cond;
      struct save_yy_cond *nxt;
    } *sv_ys_ptr;

static sv_ys_ptr save_yy_start=NULL;

static void
save_condition (void)
{
  register sv_ys_ptr nptr=(sv_ys_ptr)xmalloc(sizeof(struct save_yy_cond));
  nptr->yy_cond=yy_start;
  nptr->nxt=save_yy_start;
  save_yy_start=nptr;
#ifdef FLEX_DEBUG
  if(yy_flex_debug)
    fprintf(stderr,"\n Lex: push condition :%d => (%d)\n",
            yy_start,nptr->yy_cond);
#endif
}

static void
rest_condition(void)
{
  register sv_ys_ptr nptr=save_yy_start;
  if(nptr==NULL)
    fatal("Lex: pop conditions : stack is empty",NULL);
  yy_start=nptr->yy_cond;
  save_yy_start=nptr->nxt;
#ifdef FLEX_DEBUG
  if(yy_flex_debug)
    fprintf(stderr,"\n Lex: pop condiiton :%d <=(%d)\n",
            yy_start,nptr->yy_cond);
#endif
  xfree(nptr);
}

static struct
{
  char *mode;
  char *ext;
  int   state;
} scan_modes[] =
{ 
  {"0"     ,"? ?",INITIAL},
  {"SQL"   ,"sql",SQL},
  {"MODULE","sql",MOD},
  {"SCHEMA","sql",SCH},
  {"C"     ,"ec" ,C_lang},
  {"DMP"   ,"trl",-1}
};

void
client_scan_mode(int *p,char *s)
{ 
  register int k;
  if(!s)
    return;
  for(k=sizeof(scan_modes)/sizeof(*scan_modes);k--;)
    if(0==strcmp(s,scan_modes[k].mode))
       break;
  *p=scan_modes[k].state;
}

static void
outtype(char *text,int ins_directives)
{
  char *p;
  if (ins_directives & 1)
    fprintf (yyout,"#line %d \"%s\" \n", line_num + ( ++ io_diff),
	     progname_out);
  if (text)
    for (p = text; *p ; p++)
      if (*p != '\n')
        putc(*p,yyout);
      else
        {
          if (ins_directives & 4)
            {
#if __STDC__   /* we assume produced code will be compiled by the same compiler */
              fputs("\"\n\t\"",yyout);
              io_diff++;
#else
              while (*p == ' ' || *p == '\n' || *p == '\t') p++;
              putc(' ',yyout); p--;
#endif
            }
          else
            {
              putc('\n',yyout);
              io_diff++;
            }
        }
  if (ins_directives & 2)
    {
      fprintf(yyout,"#line %d \"%s\" \n",line_num,progname);
      io_diff++;
    }
}


int
scanner (void)
{
  extern int open_file  __P((FILE ** f, char *ext));
  int sm, oldsm;
  sm = 0;
  oldsm = scan_mode_state;
  
  if ( ( yyin = fopen (progname, "r") ) == NULL )
    {
      yyerror ("can\'t open input file");
      return 0;
    }
  if (open_file (&yyout, "c") )
    {
      char b[120];
      strcpy (b, sql_prg);
      strcat (b, ".c");
      progname_out = savestring (b);
    }
  else
    yyfatal ("Can't create .c output file");
  if (scan_mode_state == INITIAL)
    {
      register i4_t k;
      register char *pn = progname+strlen(progname);
      for (k = sizeof(scan_modes)/sizeof(*scan_modes); k--; )
        if (0 == strcmp(pn - strlen(scan_modes[k].ext),scan_modes[k].ext))
	  break;
      scan_mode_state = scan_modes[k].state;
    }
#if 0  
  /*
   * analyzing for dump extension - 
   * may be load tree dump and continue processing from dumping point
   */
  if (scan_mode_state == INITIAL)
    {
      register int k;
      register char *pn = progname+strlen(progname);
      for (k = 0; compiler_passes[k].sname; k++)
        if (0 == strcmp(pn - strlen(compiler_passes[k].ext),compiler_passes[k].ext))
	  { 
	    scan_mode_state = -1;
	    break;
	  }
    }
#endif  
  yy_init = 1;
  io_diff = 0;
  line_num = 1;
  outtype ("/* This file is created automatically by gsql compiler */\n"
	   "#include <gnusql/sql.h>\n"
	   "#include \"",0);
  outtype (sql_prg,0);
  outtype (".Sc\"\n\n",2);
  while (SCANNER_NAME () )
    {
      extern char *prepare_statement(char *a,i4_t b,char **repl);
      char *repl = NULL;
      if (sm == 0)
	{
	  if(scan_mode_state == SCH)
            {
              int ln = line_num;
              line_num = 1;
              outtype ("\n"
                       "#include \"dyn_funcs.h\"\n"
                       "\n"
                       "int main(int argc, char **argv) {\n", 1);
              line_num = ln ;
            }
	  sm = scan_mode_state;
	}
      else
	assert ((sm == scan_mode_state) || (sm == INITIAL));
      if (statement_scanner_buffer == NULL)
	yyfatal ( "Unexpected null input line");
      if (sm == SCH) /* if we scan schema - there is no need to compile */
        {            /* anything now - let's do it all at run time      */
          outtype ("  SQL__execute_immediate (\"", 0);
          outtype (statement_scanner_buffer, 4);
          outtype ("  \");\n"
                   "  if(SQLCODE>0)\n"
                   "    fprintf(stderr,\"SQL warning:%s\\n\",gsqlca.errmsg);\n"
                   "  if(SQLCODE<0){\n"
                   "    fprintf(stderr,\"SQL error:%s\\n\",gsqlca.errmsg);\n"
                   "    goto errexit;\n"
                   "  }\n"
                   , 0);
        }
      else if ( ! prepare_statement (statement_scanner_buffer, bline,
                                     (sm == MOD? NULL:&repl)) )
	return 0;
      io_diff -= line_num - bline;
      if (sm != MOD)
        outtype (repl, (sm == SCH) ? 0 : 3 );
      bline = line_num;
    }
  if (sm == SCH)
    outtype ("\n"
             "  " CALL_COMMIT_str "\n"
             "  return 0;\n"
             " errexit:\n"
             "  " CALL_ROLLBACK_str "\n"
             "  return SQLCODE;\n"
             "}\n"
             "/* end of create schema routine */\n"
             "\n", 0);
  scan_mode_state = oldsm;
  if (yyin != stdin )
    fclose (yyin);
  fclose (yyout);
  return 1;
}
#ifndef yywrap            
int yywrap() { return 1; }
#endif                    
/*end of make-dist.tmp.17704/gnusql-0.7b6.1/src/parse/scan_c.c.preserve*/
