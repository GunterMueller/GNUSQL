/* generated by /home/gunter/GM_DATABASES/DBMS/GnuSQL/gnusql-0.7b6.1/etc/rpcgen-sh /usr/bin/rpcgen . /home/gunter/GM_DATABASES/DBMS/GnuSQL/gnusql-0.7b6.1/src/include/engine /home/gunter/GM_DATABASES/DBMS/GnuSQL/gnusql-0.7b6.1/src/engine/dispatch.x at Mon Mar  6 20:18:56 EST 2017*/
# include "conn_handler.h"
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _DISPATCH_H_RPCGEN
#define _DISPATCH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include "setup_os.h"
extern long adm_rpc_port;
void fix_adm_port __P((char* opt));
#ifdef RPCMAIN_PROTO
int adm_rpc_start __P((int,char**));
#define ADM_RPC_START adm_rpc_start(argc,argv)
#else
int adm_rpc_start __P((void));
#define ADM_RPC_START adm_rpc_start()
#endif

enum rpc_svc_t {
	BOOT_SVC = 0,
	DYNAMIC_SVC = 0 + 1,
	COMPILE_SVC = DYNAMIC_SVC,
	INTERPR_SVC = DYNAMIC_SVC,
};
typedef enum rpc_svc_t rpc_svc_t;

typedef struct {
	u_int opq_len;
	char *opq_val;
} opq;

struct res {
	opq proc_id;
	int rpc_id;
};
typedef struct res res;

struct init_arg {
	char *user_name;
	int wait_time;
	int total_time;
	int type;
	int need_gdb;
	char *x_server;
};
typedef struct init_arg init_arg;
#define DEFAULT_TRN (SQL_DISP + 1)

#define SQL_DISP adm_rpc_port
extern struct rpcgen_table sql_disp_1_table[];
extern sql_disp_1_nproc;
#define SQL_DISP_ONE 1

#if defined(__STDC__) || defined(__cplusplus)
#define CREATE_TRANSACTION 1
extern  res * create_transaction_1(init_arg *, gss_client_t *);
extern  res * create_transaction_1_svc(init_arg *, struct svc_req *);
#define IS_READY 2
extern  int * is_ready_1(opq *, gss_client_t *);
extern  int * is_ready_1_svc(opq *, struct svc_req *);
#define KILL_ALL 3
extern  int * kill_all_1(int *, gss_client_t *);
extern  int * kill_all_1_svc(int *, struct svc_req *);
#define TRN_KILL 4
extern  int * trn_kill_1(opq *, gss_client_t *);
extern  int * trn_kill_1_svc(opq *, struct svc_req *);
#define DISP_FINIT 5
extern  int * disp_finit_1(int *, gss_client_t *);
extern  int * disp_finit_1_svc(int *, struct svc_req *);
#define COPY_LJ 6
extern  int * copy_lj_1(opq *, gss_client_t *);
extern  int * copy_lj_1_svc(opq *, struct svc_req *);
#define CHANGE_PARAMS 7
extern  int * change_params_1(int *, gss_client_t *);
extern  int * change_params_1_svc(int *, struct svc_req *);
extern int sql_disp_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CREATE_TRANSACTION 1
extern  res * create_transaction_1();
extern  res * create_transaction_1_svc();
#define IS_READY 2
extern  int * is_ready_1();
extern  int * is_ready_1_svc();
#define KILL_ALL 3
extern  int * kill_all_1();
extern  int * kill_all_1_svc();
#define TRN_KILL 4
extern  int * trn_kill_1();
extern  int * trn_kill_1_svc();
#define DISP_FINIT 5
extern  int * disp_finit_1();
extern  int * disp_finit_1_svc();
#define COPY_LJ 6
extern  int * copy_lj_1();
extern  int * copy_lj_1_svc();
#define CHANGE_PARAMS 7
extern  int * change_params_1();
extern  int * change_params_1_svc();
extern int sql_disp_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_rpc_svc_t (XDR *, rpc_svc_t*);
extern  bool_t xdr_opq (XDR *, opq*);
extern  bool_t xdr_res (XDR *, res*);
extern  bool_t xdr_init_arg (XDR *, init_arg*);

#else /* K&R C */
extern bool_t xdr_rpc_svc_t ();
extern bool_t xdr_opq ();
extern bool_t xdr_res ();
extern bool_t xdr_init_arg ();

#endif /* K&R C */
struct RPCGEN_TABLE_DISPATCH {
	char	*(*proc)();
	xdrproc_t	xdr_arg;
	unsigned	len_arg;
	xdrproc_t	xdr_res;
	unsigned	len_res;
};

#ifdef __cplusplus
}
#endif

#endif /* !_DISPATCH_H_RPCGEN */
